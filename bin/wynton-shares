#! /usr/bin/env bash
### Wynton HPC Shares on the Job Scheduler
###
### Usage:
###  wynton-shares <command> [options]
###
### Commands:
###  list             List all shareholders and their shares
###  tsv              As 'list --fshares' as a tab-separated values
###  total            Total number of queue slots
###
### Options:
###  --project PROJ   Subset to a particular project ("group")
###  --fshares        Include functional shares in output (slow)
###  --help           Display this help
###  --version        Display version
###
### Examples:
###  wynton shares list --fshares --project salilab
###  wynton shares list --fshares
###  wynton shares total --fshares
###  wynton shares csv
###
### Version: 0.0.10
### Copyright: Henrik Bengtsson (2019-2022)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"


# -------------------------------------------------------------------------
# CORE
# -------------------------------------------------------------------------
function mecho() { echo "$@" 1>&2; }

function mdebug() {
    if $debug; then
        mecho "[DEBUG] $*";
    fi
}
function merror() {
    mecho "ERROR: $*";
    exit 1
}
function vecho() {
    if $verbose; then
        echo "$@";
    fi
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" "$0" | sed 's/###[ ]*Version:[ ]*//g'
}

function help() {
    local res
    res=$(grep "^###" "$0" | grep -vE '^(####|### whatis: )' | cut -b 5-)
    if [[ ${UCSF_WYNTON_TOOLS} == true ]]; then
        res=$(printf "%s\\n" "${res[@]}" | sed -E 's/([^/])wynton-([a-z]+)/\1wynton \2/')
    fi
    printf "%s\\n" "${res[@]}"
}


# -------------------------------------------------------------------------
# SPECIFIC
# -------------------------------------------------------------------------


# -------------------------------------------------------------------------
# MAIN
# -------------------------------------------------------------------------
## Actions
action=help

## Options
debug=false
verbose=false
fshares=false
project=
queue="member.q"

# Parse command-line options
while [[ $# -gt 0 ]]; do
    if test "$1" == "--help"; then
        action=help
    elif test "$1" == "--version"; then
        action=version
    elif test "$1" == "--fshares"; then
        fshares=true
    elif test "$1" == "list"; then
        action=$1
    elif test "$1" == "total"; then
        action=$1
    elif test "$1" == "tsv"; then
        action=$1
    elif test "$1" == "--project"; then
        shift
        project=$1
#    elif test "$1" == "--queue"; then
#        shift
#        queue=$1
    elif test "$1" == "--debug"; then
        debug=true
    elif test "$1" == "--verbose"; then
        verbose=true
    else
        extras="$extras $1"
    fi
    shift
done

if $debug; then
    mdebug "call: $call"
    mdebug "action: $action"
    mdebug "verbose: $verbose"
fi

if [[ $action == "version" ]]; then
    version
    exit 0
elif [[ $action == "help" ]]; then
    help 
    exit 0
fi


function slots_raw() {
    SGE_SINGLE_LINE=true qconf -srqs member_queue_limits | grep -F "queues ${queue} to slots=" | sort | uniq | sed -E "s/(.*projects |queues ${queue} to slots=)//g"
}

function slots_total() {
    local slots_raw
    slots_raw=$1
    echo "${slots_raw}" | awk '{ total+=$2 } END { print total }'
}

function fshares_slots_total() {
    raw=$(fshares_slots_all_projects)
    echo "${raw}" | awk '{ fshares+=$1; slots+=$2 } END { printf "%6d %11d total\n", fshares, slots }'
}

function slots_all_projects() {
    local slots_raw
    local slots_total
    local slots_per_project
    slots_raw=$1
    
    echo "queue_slots project"
    slots_total=$(slots_total "${slots_raw}")
    slots_per_project=$(echo "${slots_raw}" | awk -v total="${slots_total}" '{ printf "%11d %s\n", $2, $1 }' | sort -r)
    echo "${slots_per_project}"
}

function slots_one_project() {
    local res
    local project
    project=$1
    res=$(slots_all_projects "$(slots_raw)")
    echo "queue_slots project"
    echo "${res}" | grep -E "[ ]${project}"
}

function fshares_slots_one_project() {
    local res
    local project
    local fshares
    project=$1
    res=$(slots_one_project "${project}")
    echo "fshares queue_slots project"
    fshares=$(fshares_one_project "${project}")
    printf "%6d " "${fshares}"
    echo "${res}" | grep -E "[ ]${project}"
}

function fshares_slots_all_projects() {
    local res
    local projects
    local project
    local fshares
    res=$(slots_all_projects "$(slots_raw)")
    echo "fshares queue_slots project"
    projects=$(echo "${res}" | awk 'NR > 1 { print $2 }')
    for project in ${projects[*]}; do
      IFS="," read -r -a subprojects <<< "$project"
      subfshares=()
      fshares=0
      for subproject in ${subprojects[*]}; do
        t=$(fshares_one_project "${subproject}")
        subfshares+=(t)
        fshares=$((fshares + t))
      done
      printf "%6d " "${fshares}"
      echo "${res}" | grep -E "[ ]${project}"
    done
}

function fshares_one_project() {
    qconf -sprj "$1" | grep "fshare" | sed -E 's/fshare[ ]+//'
}


if [[ $action == "list" ]]; then
    if [[ -n "${project}" ]]; then
        ## List a single project
        if $fshares; then
            fshares_slots_one_project "${project}"
        else
            slots_one_project "${project}"
        fi
    else
        ## List all projects
        if $fshares; then
            fshares_slots_all_projects "$(slots_raw)"
        else
            slots_all_projects "$(slots_raw)"
        fi    
    fi
elif [[ $action == "total" ]]; then
    if $fshares; then
      echo "fshares queue_slots project"
      fshares_slots_total
    else
      echo "queue_slots project"
      printf "%11d total\n" "$(slots_total "$(slots_raw)")"
    fi
elif [[ $action == "tsv" ]]; then
    data=$(wynton shares list --fshares | awk 'BEGIN {OFS="\t";} { print $1, $2, $3}')
    columns=$(echo "$data" | head -n 1)
    shares=$(echo "$data" | sed '1d' | sort -n -r -k 1)
    echo "# Created by: ${USER}"
    echo "# Created on: $(date --rfc-3339=seconds)"
    echo "${shares}" | awk 'NR > 0 { fshares+=$1; slots+=$2 } END { printf "# Total fshares: %d\n# Total queue_slots: %d\n# Number of projects: %d\n", fshares, slots, NR }'
    echo "${columns}"
    echo "${shares}"
fi
