#! /usr/bin/env bash
#' Watchdog for Jobs on the Queue
#'
#' Usage:
#'  wynton-watchdog-jobs [options]
#' 
#' Flags:
#'  --help             Display this help
#'  --version          Display version
#'
#'  --state=<state>    Job state to include
#'                     (default: empty, i.e. all jobs)
#'  --max-age=<age>    Max submission-time age
#'                     (default: 7d)
#'
#' Options:
#'
#' Examples:
#' wynton watchdog-jobs --state=Eqw
#' wynton watchdog-jobs --state=Eqw --max-age=5d
#' wynton watchdog-jobs --state=Eqw --max-age=3h
#'
#' License: See 'wynton --help'
call="$0 $*"

this="${BASH_SOURCE%/}"
[[ -L "${this}" ]] && this=$(readlink "${this}")

utils="$(dirname "${this}")/utils"

## Import bash utility functions
incl="$(dirname "${this}")/incl"

# shellcheck source=incl/asserts.sh
source "${incl}/asserts.sh"
# shellcheck source=incl/cli.sh
source "${incl}/cli.sh"
# shellcheck source=incl/conditions.sh
source "${incl}/conditions.sh"
# shellcheck source=incl/files.sh
source "${incl}/files.sh"
# shellcheck source=incl/output.sh
source "${incl}/output.sh"
# shellcheck source=incl/system.sh
source "${incl}/system.sh"
# shellcheck source=incl/ldap.sh
source "${incl}/ldap.sh"


# -------------------------------------------------------------------------
# SPECIFIC
# -------------------------------------------------------------------------
qstat_filter() {
    local state
    local -i now
    local -i since
    local -i max_age
    
    # Current date in seconds since the epoch
    now=$(date +%s)
    mdebug "now=${now} [$(date --date="@${now}" +"%FT%T")]"

    state=${1}
    mdebug "state='${state}'"
    
    # Max age since submission (default: 7 days)
    max_age="${2:-$((7 * 24 * 60 * 60))}"
    assert_integer "${max_age}"
    mdebug "max_age=${max_age}"

    since=$((now - max_age))
    mdebug "since=${since} [$(date --date="@${since}" +"%FT%T")]"

    # Use qstat to list all jobs, filter with awk for jobs in error state 'E'
    qstat -u '*' | awk -v state="${state}" -v since="${since}" '
    BEGIN {
        # Assuming qstat output format: job-ID prior name user state submit/start at queue slots ja-task-ID
        FS = " "
        OFS = " "
    }
    {
        if (NF < 7) next  # Skip incomplete lines
        job_id = $1
        job_state = $5
        if (state != "" && job_state == state) {
            ## Job submission timestamp
            job_time_str = $6 " " $7

            ## Job submission ISO timestamp
            cmd = "date -d\"" job_time_str "\" +%FT%T"
            cmd | getline job_time_iso

            ## Job submission epoch time
            cmd = "date -d\"" job_time_iso "\" +%s"
            cmd | getline job_time
            close(cmd)
    
            # Display matching jobs
            if ((job_time >= since)) {
                $6=job_time_iso
                $7=""
                $0=$0
                print $0  # Print the job details
            }
        }
    }'
} ## qstat_filter()

# -------------------------------------------------------------------------
# MAIN
# -------------------------------------------------------------------------
## Actions
action=list
state=
max_age=

## Options
debug=false

# Parse command-line options
while [[ $# -gt 0 ]]; do
    if test "$1" == "--help"; then
        action=help
    elif test "$1" == "--version"; then
        action=version
    elif test "$1" == "--debug"; then
        debug=true

    ## Options (--key=value):
    elif [[ "$1" =~ ^--.*=.*$ ]]; then
        key=${1//--}
        key=${key//=*}
        value=${1//--[[:alpha:]-]*=}
        mdebug "Key-value option '$1' parsed to key='${key}', value='${value}'"
        if [[ -z ${value} ]]; then
            error "Option '--${key}' must not be empty"
        fi
        if [[ "${key}" == "state" ]]; then
            state=${value}
        elif [[ "${key}" == "max-age" ]]; then
	    value=${value/d/*24h}
	    value=${value/h/*60m}
	    value=${value/m/*60s}
	    value=${value/s/}
	    value=$(bc <<< "${value}")
            assert_integer "${value}"
            max_age=${value}
        else
            error "Unknown option: $1"
        fi
     else
        extras="$extras $1"
    fi
    shift
done

if $debug; then
    mdebug "call: ${call}"
    mdebug "action: ${action}"
    mdebug "state: ${state}"
    mdebug "max_age: ${max_age}"
fi

if [[ $action == "version" ]]; then
    version
    exit 0
elif [[ $action == "help" ]]; then
    help ""
    exit 0
fi


if [[ $action == "list" ]]; then
    qstat_filter "${state}" "${max_age}"
fi
