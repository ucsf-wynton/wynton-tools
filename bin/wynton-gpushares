#! /usr/bin/env bash
#' Wynton HPC GPU Shares on the Job Scheduler
#'
#' Usage:
#'  wynton-gpushares <command> [options]
#'
#' Commands:
#'  tsv                (project,queue,count,hosts) tab-separated values
#'
#' Flags:
#'  --help             Display this help
#'  --version          Display version
#'
#' Options:
#'  --queue=<pattern>  Regular expression to filter on GPU queues
#'
#' Examples:
#'  wynton gpushares tsv
#'
#' Version: 0.1.0
#' Copyright: Henrik Bengtsson (2021-2022)
#' License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"

this="${BASH_SOURCE%/}"
[[ -L "${this}" ]] && this=$(readlink "${this}")

## Import bash utility functions
incl="$(dirname "${this}")/incl"

# shellcheck source=incl/asserts.sh
source "${incl}/asserts.sh"
# shellcheck source=incl/cli.sh
source "${incl}/cli.sh"
# shellcheck source=incl/conditions.sh
source "${incl}/conditions.sh"
# shellcheck source=incl/files.sh
source "${incl}/files.sh"
# shellcheck source=incl/output.sh
source "${incl}/output.sh"
# shellcheck source=incl/system.sh
source "${incl}/system.sh"


# -------------------------------------------------------------------------
# SPECIFIC
# -------------------------------------------------------------------------


# -------------------------------------------------------------------------
# MAIN
# -------------------------------------------------------------------------
## Actions
action=help

## Options
debug=false
verbose=false
queue="(.*[.]q)"

# Parse command-line options
while [[ $# -gt 0 ]]; do
    if test "$1" == "--help"; then
        action=help
    elif test "$1" == "--version"; then
        action=version
    elif test "$1" == "tsv"; then
        action=$1
    elif test "$1" == "raw"; then
        action=$1
    elif test "$1" == "--debug"; then
        debug=true
    elif test "$1" == "--verbose"; then
        verbose=true
	
    ## Options (--key=value):
    elif [[ "$1" =~ ^--.*=.*$ ]]; then
        key=${1//--}
        key=${key//=*}
        value=${1//--[[:alpha:]]*=}
        mdebug "Key-value option '$1' parsed to key='${key}', value='${value}'"
        if [[ -z ${value} ]]; then
            error "Option '--${key}' must not be empty"
        fi
        if [[ "${key}" == "queue" ]]; then
            queue=${value}
        else
            error "Unknown option: $1"
        fi
    else
        extras="$extras $1"
    fi
    shift
done

if $debug; then
    mdebug "call: $call"
    mdebug "action: $action"
    mdebug "verbose: $verbose"
fi

if [[ $action == "version" ]]; then
    version
    exit 0
elif [[ $action == "help" ]]; then
    help ""
    exit 0
fi


function gpu_raw_limits() {
    config=$(SGE_SINGLE_LINE=true qconf -srqs shared_gpu_limits | grep -E "\blimit\b")
    limits=$(echo "$config" | sed -E 's/^[[:space:]]+limit[[:space:]]+//g')
    data=$(echo "$limits" | sed -E 's/(projects|queues|hosts|to)[[:space:]]+/ /g')
    data=$(echo "$data" | sed -E 's/([{]|[}])//g' | sed 's/!//g' | sed -E 's/^[[:space:]]+//')
    data=$(echo "$data" | sed -E 's/[[:space:]]+/~/g')
    data=$(echo "$data" | grep -E "~${queue}~")
    echo "${data}"
}

function gpu_hosts() {
    local name=$1
    local hosts
    
    ## Nothing to do?
    if echo "$name" | grep -q -E "^@"; then
        hosts=$(SGE_SINGLE_LINE=true qconf -shgrp "$name" | grep -E "^hostlist[[:space:]]+" | sed -E 's/^hostlist[[:space:]]+//g')
    else
        hosts="$name"
    fi
    echo "$hosts"
}


if [[ $action == "raw" ]]; then
    gpu_raw_limits
elif [[ $action == "tsv" ]]; then
    echo "# Created by: ${USER}"
    echo "# Created on: $(date --rfc-3339=seconds)"
    printf "project\tqueue\tnbr_of_hosts\thosts\n"
    mapfile -t raw < <(gpu_raw_limits)
    tab=$'\t'
    for entry in "${raw[@]}"; do
        line="${entry//\~/$tab}"
        hosts=$(echo "$entry" | cut -d '~' -f 3)
        read -r -a hosts_set < <(gpu_hosts "$hosts")
        nhosts=${#hosts_set[@]}
        hosts=${hosts_set[*]}
        hosts=${hosts// /, }
        queue=$(echo "$line" | cut -f 2)
        project=$(echo "$line" | cut -f 1 | sed 's/,/, /g')
        printf "%s\t%s\t%s\t%s\n" "$project" "$queue" "$nhosts" "$hosts"
    done
fi
