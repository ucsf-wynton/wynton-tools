#! /usr/bin/env bash
#' Watchdog for Processes Running on Hosts
#'
#' Usage:
#'  wynton-watchdog-ps [options]
#' 
#' Flags:
#'  --help             Display this help
#'  --version          Display version
#'
#' Options:
#'  --hosttype=<type>  'log', 'dt', 'dev', or 'compute'
#'
#' Examples:
#' wynton watchdog-ps --hosttype=log
#'
#' License: See 'wynton --help'
call="$0 $*"

this="${BASH_SOURCE%/}"
[[ -L "${this}" ]] && this=$(readlink "${this}")

utils="$(dirname "${this}")/utils"

## Import bash utility functions
incl="$(dirname "${this}")/incl"

# shellcheck source=incl/asserts.sh
source "${incl}/asserts.sh"
# shellcheck source=incl/cli.sh
source "${incl}/cli.sh"
# shellcheck source=incl/conditions.sh
source "${incl}/conditions.sh"
# shellcheck source=incl/files.sh
source "${incl}/files.sh"
# shellcheck source=incl/output.sh
source "${incl}/output.sh"
# shellcheck source=incl/system.sh
source "${incl}/system.sh"
# shellcheck source=incl/ldap.sh
source "${incl}/ldap.sh"


# -------------------------------------------------------------------------
# SPECIFIC
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
# MAIN
# -------------------------------------------------------------------------
## Actions
action=list
hosttype=

## Options
debug=false
user_width=12

# Parse command-line options
while [[ $# -gt 0 ]]; do
    if test "$1" == "--help"; then
        action=help
    elif test "$1" == "--version"; then
        action=version
    elif test "$1" == "--debug"; then
        debug=true

    ## Options (--key=value):
    elif [[ "$1" =~ ^--.*=.*$ ]]; then
        key=${1//--}
        key=${key//=*}
        value=${1//--[[:alpha:]-]*=}
        mdebug "Key-value option '$1' parsed to key='${key}', value='${value}'"
        if [[ -z ${value} ]]; then
            error "Option '--${key}' must not be empty"
        fi
        if [[ "${key}" == "hosttype" ]]; then
            hosttype=${value}
        elif [[ "${key}" == "user-width" ]]; then
            assert_integer "${value}"
            user_width=${value}
        else
            error "Unknown option: $1"
        fi
     else
        extras="$extras $1"
    fi
    shift
done

if $debug; then
    mdebug "call: $call"
    mdebug "action: $action"
    mdebug "hosttype: $hosttype"
    mdebug "user_width: $user_width"
fi

if [[ $action == "version" ]]; then
    version
    exit 0
elif [[ $action == "help" ]]; then
    help ""
    exit 0
fi


if [[ $action == "list" ]]; then
    mapfile -t ps_info < <(ps -e -o "uid,user:${user_width},pid,pcpu,start_time,comm,cmd")
    header="${ps_info[0]}"
    
    ## Ignore system UIDs (uid < 1000)
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$1 >= 1000')

    ## Ignore known users
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$2 !~ /^hb-test$/')

    
    ## --------------------------------------------------------------------
    ## Any host type
    ## --------------------------------------------------------------------
    ## Ignore allowed commands ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(\(sd-pam\)|COMMAND|btop|dbus-daemon|dshbak|flock|htop|pdsh|ps|sleep|ssh|ssh-agent|sshd|systemd|top|watch|xargs)$/')

    ## Allow BeeGFS tools ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(beegfs-ctl\/Main)$/')

    ## Allow SGE tools ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(qacct|qalter|qconf|qhold|qhost|qmod|qrls|qstat|qsub|sge_execd)$/')

    ## Allow shells ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(bash|csh|sh|tcsh|zsh)$/')

    ## Allow shell environments ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(byobu|byobu-status|screen|tmux|tmux:)$/')

    ## Allowed editors ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(emacs|nano|vi|vim|view)$/')
    
    ## Allowed file processing tools ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(awk|cat|cut|file|grep|head|less|lesspipe.sh|more|sed|sort|tail|uniq|wc)$/')
    
    ## Allowed misc. tools ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(bc|man|time|timeout)$/')
        
    ## Allowed file-related tools ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(cp|curl|df|du|find|git|gzip|ls|ln|mv|rm|rsync|stat|tar|touch|wget|zip|unzip)$/')

    ## Allow MATLAB service processes
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$7 !~ /([/]MathWorksServiceHost(-Monitor)*)/')
    
    ## Allow VS Code ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(code-insiders-.+)$/')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$7 !~ /([/][.]vscode-server[/])/')

    ## Allow VS Code extension 'mypy', 'lsp_server' ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 != "python" || ! /-m mypy[.]dmypy/')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 != "python" || ! /lsp_server.py/')
        

    ## Allowed CBI stack tools ('comm')
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(bat|htop)$/')

    ## --------------------------------------------------------------------
    ## Login or data-transfer hosts?
    ## --------------------------------------------------------------------
    if [[ ${HOSTNAME} == *log* ]] || [[ ${HOSTNAME} == *dt* ]]; then
        ## Allowed file-related tools ('comm')
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(scp|sftp|sftp-server)$/')
    
        ## Allow AWS ('comm')
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(aws)$/')
    
        ## --------------------------------------------------------------------
        ## Allowed on login hosts only
        ## --------------------------------------------------------------------
        if [[ ${HOSTNAME} == *log* ]]; then
            true
        fi
    
        ## --------------------------------------------------------------------
        ## Allowed on data-transfer hosts only
        ## --------------------------------------------------------------------
        if [[ ${HOSTNAME} == *dt* ]]; then
            mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(ftp|lftp|globus-gridftp-.*|rclone|rsync)$/')
    
            ## Download tools for EMBL EBI's EGA (European Genome-phenome Archive)
            mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(pyega3)$/')
    
            ## Tools for NIMH Data Archive (NDA)
            mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(vtcmd)$/')
    
            ## Sage Bionetworks' Synapse (https://www.synapse.org/)
            mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(synapse)$/')
            
            ## Download tools for Illumina
            ## https://developer.basespace.illumina.com/docs/content/documentation/cli/cli-overview
            mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(bs)$/')
    
            ## IBM Aspera High-Speed Transfer Endpoint
            ## https://www.ibm.com/docs/en/ahte
            mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(ascp)$/')
    
            ## SRAToolkit
            mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(prefetch)$/' | awk '{ split($7, a, " "); n=split(a[1], b, "/"); if (b[n] != "prefetch") print $0 }')
        fi
        
    ## --------------------------------------------------------------------
    ## Development hosts?
    ## --------------------------------------------------------------------
    elif [[ ${HOSTNAME} == *dev* ]]; then
        ## Allowed X11- and X2Go-related tools ('comm')
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(x2goagent|x2gogetagentsta|x2goruncommand|x2goresume-sess.*|mate-panel|mate-session|mate-settings-d.*|mate-terminal)$/')	

        ## Allowed misc. ('comm')
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(marco|polkit-mate-aut.*|gnome-keyring-d.*|dconf-service|dbus-kill-proce.*|dbus-run-sessio.*|at-spi-bus-laun.*|at-spi2-registr.*|gio|caja|agent|starter-suid)$/')

        ## Allowed GVFSD(?) tools ('comm')
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(gvfsd|gvfsd-dnssd|gvfsd-network|gvfs-udisks2-vo.*|gvfsd-computer|gvfsd-http|gvfsd-trash|gvfsd-metadata)$/')

        ## Allowed Apptainer/Singularity tools ('comm')
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(squashfuse_ll|faked)$/')
        
        ## Allowed Firefox tools ('comm')
	## The following doesn't work, because there are SPACEs in 'comm' column
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(firefox|Socket Process|Utility Process|WebExtensions|Isolated Web Co.*|Privileged Cont.*)$/')
	## ... so we have to go barebone like:
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | grep -v -E ' (firefox|Socket Process|Utility Process|Web Content|WebExtensions|Isolated Web Co.*|Privileged Cont.*) ')

        ## Allowed Python tools ('comm')
        mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | awk '$6 !~ /^(pip)$/')
    fi

    
    ## Trim
    mapfile -t ps_info < <(printf "%s\n" "${ps_info[@]}" | grep -v -E "^$")

    ## Display column headers
    if [[ "${#ps_info[@]}" -gt 0 ]]; then
        mapfile -t users < <(printf "%s\n" "${ps_info[@]}" | awk '{ print $2 }' | sort | uniq)
        echo "# Suspicious processes"
        echo
        echo "* Users: [n=${#users[@]}] ${users[*]}"
        echo "* Number of processes: ${#ps_info[@]}"
        echo
        printf "%s\n" "${header}"
        printf "%s\n" "${ps_info[@]}"
    fi
fi
